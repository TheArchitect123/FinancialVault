// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Collections;

using Foundation;
using UIKit;
using CoreGraphics;

namespace FinanceCalculator
{
	public partial class ChangeOfCurrencyController : UITableViewController
	{
		public ChangeOfCurrencyController (IntPtr handle) : base (handle)
		{
		}

		private List<string> currencyChoice = new List<string>() {
			{"\ud83c\uddfa\ud83c\uddf8 US Dollar (USD)"},{"\ud83c\uddea\ud83c\uddfa European Euro (EUR)"},{"\ud83c\uddef\ud83c\uddf5 Japanese Yen (JPY)"},
			{"\ud83c\uddec\ud83c\udde7 British Pound (GBP)"}, {"\ud83c\udde8\ud83c\udded Swiss Franc (CHF)"},{"\ud83c\udde8\ud83c\udde6 Canadian Dollar (CAD)"},{"\ud83c\udde6\ud83c\uddfa Australian Dollar (AUD)"},{"\ud83c\uddff\ud83c\udde6 South African Rand (ZAR)"}, {"\ud83c\uddf3\ud83c\uddff New Zealand Dollar (NZD)"},
			{"\ud83c\uddf2\ud83c\uddfd Mexican Peso (MXN)"},{"\ud83c\udde8\ud83c\uddf3 Chinese Yuan (CNY)"},{"\ud83c\uddf8\ud83c\uddea Swedish Krona (SEK)"},
			{"\ud83c\uddf7\ud83c\uddfa Russian Ruble (RUB)"},{"\ud83c\udded\ud83c\uddf0 Hong Kong Dollar (HKD)"},{"\ud83c\uddf3\ud83c\uddf4 Norwegian Krone (NOK)"},{"\ud83c\uddf8\ud83c\uddec Singapore Dollar (SGD)"}, {"\ud83c\uddf9\ud83c\uddf7 Turkish Lira (TRY)"},
			{"\ud83c\uddf0\ud83c\uddf7 South Korean Won(KRW)"},{"\ud83c\udde7\ud83c\uddf7 Brazilian Real (BRL)"},{"\ud83c\uddee\ud83c\uddf3 Indian Rupee (INR)"}
		};

		private List<string> currencySymbol = new List<string>()
		{
			{"$"},{"€"},{"¥"},{"£"},{"Fr"},{"$"},{"$"}, {"R"},{"$"},{"$"},
			{"¥"},{"kr"},{"₽"},{"$"},{"kr"},{"$"},{"₺"},{"₩"},
			{"R$"},{"₹"}
		};

		private void alertInstructions(string title, string message)
		{
			UIAlertController instructionsController = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);

			UIAlertAction confirmed = UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (Action) =>
			{
				instructionsController.Dispose();
			});

			instructionsController.AddAction(confirmed);

			if (this.PresentedViewController == null)
			{
				this.PresentViewController(instructionsController, true, null);
			}

			else if (this.PresentedViewController != null)
			{
				this.PresentedViewController.DismissViewController(true, () =>
				{
					this.PresentedViewController.Dispose();
					this.PresentViewController(instructionsController, true, null);
				});
			}
		}


		public ChangeOfCurrencyController() { }

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			this.NavigationItem.Title = "Choose a currency";

			UINavigationBar navBar = new UINavigationBar();
			navBar.Frame = new CGRect(0, 0, this.View.Bounds.Width, 50);

			navBar.BarStyle = UIBarStyle.Default;


			UIBarButtonItem cancelButton = new UIBarButtonItem("Cancel", UIBarButtonItemStyle.Bordered, (sender, e) => {
				this.DismissViewController(true, () =>
				{
					this.Dispose();
				});
			});

			UINavigationItem cancel = new UINavigationItem();
			cancel.SetLeftBarButtonItem(cancelButton, true);

			navBar.Items = new UINavigationItem[] { cancel };
			this.View.AddSubview(navBar);
		}


		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell currencyCell = tableView.DequeueReusableCell("currencyCell");

			if (currencyCell == null)
			{
				currencyCell = new UITableViewCell(UITableViewCellStyle.Value1, "currencyCell");
			}

			currencyCell.TextLabel.Text = currencyChoice[indexPath.Row];
			currencyCell.TextLabel.TextColor = UIColor.Black;


			UITextField currencySymbolText = new UITextField();

			currencySymbolText.Frame = new CoreGraphics.CGRect(0, 0, 60, 30);

			currencySymbolText.UserInteractionEnabled = false;
			currencySymbolText.BorderStyle = UITextBorderStyle.None;
			currencySymbolText.Font = UIFont.BoldSystemFontOfSize(18.0f);
			currencySymbolText.Text = this.currencySymbol[indexPath.Row];

			currencyCell.AccessoryView = currencySymbolText;

			return currencyCell;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return this.currencyChoice.Count;
		}

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			ExpenseController expController = new ExpenseController();
			switch (indexPath.Row)
			{
				case 0:
					this.DismissViewController(true, () => {
						expController.symbolCurrency = this.currencySymbol[0];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 1:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[1];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 2:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[2];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 3:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[3];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 4:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[4];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 5:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[5];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 6:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[6];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 7:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[7];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 8:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[8];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 9:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[9];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 10:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[10];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 11:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[11];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 12:
				this.DismissViewController(true, () =>{
						expController.symbolCurrency = this.currencySymbol[12];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});


					break;

				case 13:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[13];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 14:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[14];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 15:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[15];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 16:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[16];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 17:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[17];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				case 18:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[18];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});
					break;

				case 19:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[19];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;

				default:
					this.DismissViewController(true, () =>
					{
						expController.symbolCurrency = this.currencySymbol[20];
						Console.WriteLine("Symbol used: " + expController.symbolCurrency);
					});

					break;
			}
			tableView.DeselectRow(indexPath, true);
		}
	}
}
