
// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections;
using System.Collections.Generic;

using Foundation;
using UIKit;
using CoreGraphics;
using AudioToolbox; 
  
//App Name: 3-in-1 Calculator
/* Leftover tasks: 
 * Implement SQL Database 
 * Create the Proposed budget controller 
 * Create a disclaimer at the start detailing that I am in no way a finance advisor and the user should seek a finance avdisor. 
 * Create the scientific calculator 
 * Create the income tax calculator 

*/
namespace FinanceCalculator
{
	public partial class TotalCalculationController : UITableViewController
	{
		public TotalCalculationController(IntPtr handle) : base(handle)
		{
		}


		/* If the vault retries these properties what will happen is that when the 
		 * controller gets popped its resources will be disposed

		*/
		//total income

		public AppDelegate PassingProperties {
			get {
				return (AppDelegate)UIApplication.SharedApplication.Delegate;
			}
		}

		public double incomeTotal;
		public double expensesTotal;

		//expenses total items
		public double rentRef;
		double housingRef;
		double mortgageRef;
		double insuranceRef;
		double taxesRef;
		double carPaymentsRef;
		double educationRef;
		double electronicsRef;
		double entertainmentRef;
		double clothingRef;
		double petsRef;
		double charityRef;
		double foodRef;
		double healthLifestyleRef;
		double gardeningRef;
		double cleaningRef;
		double utilitiesRef;
		double otherExpenseRef;



		//income total items
		double wagesRef;
		double realestateRef;
		double salesHouseStockRef;
		double smallBusinessRef;
		double gamblingWinningsRef;
		double salesOfTradesRef;
		double intellectualPropertyRef;
		double appRoyaltiesRef;
		double bookPublishingRef;
		double tradeDividendsRef;
		double bankInterestRef;
		double taxReturnRef;
		double studentLoanRef;
		double inheritanceRef;
		double prizeMoneyRef;
		double otherIncomeRef;

		string symbolCurrencyHandler;  //currency symbol used

		List<double> expensesValues = new List<double>() { 
		};
		List<double> incomeValues = new List<double>() { };

		// values
		public TotalCalculationController(double incomeRef, double expensesRef, double rent,
										 double housing, double mortgage, double insurance, double taxes, double carPayments, double education, double electronics,
										 double entertainment, double clothing, double pets, double charity, double food, double healthLifestyle, double gardening,
										 double cleaning, double utilities, double otherExpense,
										 double wages, double realestate, double salesHouseStock, double smallBusiness, double gamblingWinnings, double salesOfTrades, double intellectualProperty, double appRoyalties, double bookPublishing, double tradeDividends,
										 double bankInterest, double taxReturn, double studentLoan, double inheritance, double prizeMoney, double otherIncome, string symbol)
		{
			//total 
			incomeTotal = incomeRef;
			expensesTotal = expensesRef;

			symbolCurrencyHandler = symbol;

			//expenses values
			rentRef = rent;
			housingRef = housing;
			mortgageRef = mortgage;
			insuranceRef = insurance;
			taxesRef = taxes;
			carPaymentsRef = carPayments;
			educationRef = education;
			electronicsRef = electronics;
			entertainmentRef = entertainment;
			clothingRef = clothing;
			petsRef = pets;
			charityRef = charity;
			foodRef = food;
			healthLifestyleRef = healthLifestyle;
			gardeningRef = gardening;
			cleaningRef = cleaning;
			utilitiesRef = utilities;
			otherExpenseRef = otherExpense;

			//income values
			wagesRef = wages;
			realestateRef = realestate;
			salesHouseStockRef = salesHouseStock;
			smallBusinessRef = smallBusiness;
			gamblingWinningsRef = gamblingWinnings;
			salesOfTradesRef = salesOfTrades;
			intellectualPropertyRef = intellectualProperty;
			appRoyaltiesRef = appRoyalties;
			bookPublishingRef = bookPublishing;
			tradeDividendsRef = tradeDividends;
			bankInterestRef = bankInterest;
			taxReturnRef = taxReturn;
			studentLoanRef = studentLoan;
			inheritanceRef = inheritance;
			prizeMoneyRef = prizeMoney;
			otherIncomeRef = otherIncome;

			expensesValues = new List<double>() {
				rentRef,housingRef,mortgageRef,insuranceRef,taxesRef,carPaymentsRef,educationRef,electronicsRef,entertainmentRef,clothingRef,petsRef,charityRef,foodRef,
				healthLifestyleRef,gardeningRef,cleaningRef,utilitiesRef,otherExpenseRef
			};
			incomeValues = new List<double>() {
			 wagesRef, realestateRef,salesHouseStockRef,smallBusinessRef,gamblingWinningsRef,salesOfTradesRef,intellectualPropertyRef,appRoyaltiesRef,
			bookPublishingRef,tradeDividendsRef,bankInterestRef,taxReturnRef,studentLoanRef,inheritanceRef,prizeMoneyRef,otherIncomeRef
			};
		}


		List<string> expensesCategories = new List<string>() {
			{"\ud83d\udecf Rent"},{"\ud83c\udfe1 Housing"},{"\ud83d\udcb3 Mortgage"},{"\ud83d\udc94 Insurance"},{"\ud83d\udcd3 Taxes"},{"\ud83d\ude97 Car Payments"},{"\ud83d\udcda Education"},{"\ud83d\udd0c Electronics"},
			{"\ud83c\udfa5 Entertainment"},{"\ud83d\udc55 Clothing & Footwear"},{"\ud83d\udc08 Pets"},{"\ud83c\udf81 Charity"},{"\ud83c\udf54 Food"},{"\ud83d\udc5f Health & Lifestyle"},{"\ud83c\udf3b Gardening"},
			{"âœ¨ Cleaning & Maintanance"},{"\ud83d\udec1 Utilities"},{"\ud83d\uddde Other"}
		};

		List<string> incomeCategories = new List<string>() {
			{"\ud83d\udcb0 Wages/Salaries"},{"\ud83c\udfe1 Realestate"},{"\ud83d\udcb5 Sales of Owned Stock/House Products"},{"\ud83d\udcd6 Small Business"},{"\ud83c\udfb0 Gambling winnings"},{"\ud83d\udcc8 Sales of Trades/Stocks"},{"\ud83d\udcd3 Intellectual Property"},{"\ud83c\udf7e App Royalties"},
			{"\ud83d\udce6 Book Publishing"},{"\ud83d\udcca Trade Dividends"},{"\ud83d\udcb3 Bank interest/Term Deposit"},{"\ud83d\udcdc Tax Return"},{"\ud83c\udfc5 Student Loan/Grant"},{"\ud83d\udc8e Inheritance"},{"\ud83c\udfc6 Prize Money"},{"\ud83d\udcf0 Other"}
		};



		public override nint NumberOfSections(UITableView tableView)
		{
			return 2;
		}


		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell listOfTable = tableView.DequeueReusableCell("listTable");

			if(listOfTable == null) {
				listOfTable = new UITableViewCell(UITableViewCellStyle.Subtitle, "listTable"); 
			}
			UIProgressView expensesProgress = new UIProgressView();
			expensesProgress.Style = UIProgressViewStyle.Default;

			if(UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
				expensesProgress.Frame = new CGRect(0, 20, 100, 40);
			}
			else if(UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad) {
				expensesProgress.Frame = new CGRect(0, 20, 300, 50);
			}


			//draw the results sections 
			switch (indexPath.Section)
			{
				case 0: //expenses section

					listOfTable.TextLabel.Text = expensesCategories[indexPath.Row];
					listOfTable.TextLabel.TextColor = UIColor.Black;

					try
					{
						if (expensesValues.Count == 0)
						{
							throw new ArgumentOutOfRangeException();
						}
						else if (expensesValues.Count >= 0)
						{
							listOfTable.DetailTextLabel.Text = symbolCurrencyHandler + expensesValues[indexPath.Row];
							listOfTable.DetailTextLabel.TextColor = UIColor.Gray;
							listOfTable.DetailTextLabel.Font = UIFont.SystemFontOfSize(16.0f);
						}
					}
					catch (ArgumentOutOfRangeException)
					{

					}
					expensesProgress.TrackTintColor = UIColor.LightGray;
					expensesProgress.ProgressTintColor = UIColor.Red;
					tableView.AddSubview(expensesProgress);

					switch (indexPath.Row)
					{
						case 0:
							if (Double.IsNaN(rentRef) || Double.IsNaN(expensesTotal))
							{
								rentRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(rentRef / expensesTotal), false);
							}
							else if (rentRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(rentRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 1:
							if (Double.IsNaN(housingRef) || Double.IsNaN(expensesTotal))
							{
								housingRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(housingRef / expensesTotal), false);
							}
							else if (housingRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(housingRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 2:
							if (Double.IsNaN(mortgageRef) || Double.IsNaN(expensesTotal))
							{
								mortgageRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(mortgageRef / expensesTotal), false);
							}
							else if (mortgageRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(mortgageRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 3:
							if (Double.IsNaN(insuranceRef) || Double.IsNaN(expensesTotal))
							{
								insuranceRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(insuranceRef / expensesTotal), false);
							}
							else if (insuranceRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(insuranceRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 4:
							if (Double.IsNaN(taxesRef) || Double.IsNaN(expensesTotal))
							{
								taxesRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(taxesRef / expensesTotal), false);
							}
							else if (taxesRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(taxesRef / expensesTotal), false);
							}

							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 5:
							if (Double.IsNaN(carPaymentsRef) || Double.IsNaN(expensesTotal))
							{
								carPaymentsRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(carPaymentsRef / expensesTotal), false);
							}
							else if (carPaymentsRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(carPaymentsRef / expensesTotal), false);
							}

							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 6:
							if (Double.IsNaN(educationRef) || Double.IsNaN(expensesTotal))
							{
								educationRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(educationRef / expensesTotal), false);
							}
							else if (educationRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(educationRef / expensesTotal), false);
							}

							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 7:
							if (Double.IsNaN(electronicsRef) || Double.IsNaN(expensesTotal))
							{
								electronicsRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(electronicsRef / expensesTotal), false);
							}
							else if (electronicsRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(electronicsRef / expensesTotal), false);
							}

							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 8:
							if (Double.IsNaN(entertainmentRef) || Double.IsNaN(expensesTotal))
							{
								entertainmentRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(entertainmentRef / expensesTotal), false);
							}
							else if (entertainmentRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(entertainmentRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 9:
							if (Double.IsNaN(clothingRef) || Double.IsNaN(expensesTotal))
							{
								clothingRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(clothingRef / expensesTotal), false);
							}
							else if (clothingRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(clothingRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 10:
							if (Double.IsNaN(petsRef) || Double.IsNaN(expensesTotal))
							{
								petsRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(petsRef / expensesTotal), false);
							}
							else if (petsRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(petsRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 11:
							if (Double.IsNaN(charityRef) || Double.IsNaN(expensesTotal))
							{
								charityRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(charityRef / expensesTotal), false);
							}
							else if (charityRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(charityRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 12:
							if (Double.IsNaN(foodRef) || Double.IsNaN(expensesTotal))
							{
								foodRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(foodRef / expensesTotal), false);
							}
							else if (foodRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(foodRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 13:
							if (Double.IsNaN(healthLifestyleRef) || Double.IsNaN(expensesTotal))
							{
								healthLifestyleRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(healthLifestyleRef / expensesTotal), false);
							}
							else if (healthLifestyleRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(healthLifestyleRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 14:
							if (Double.IsNaN(gardeningRef) || Double.IsNaN(expensesTotal))
							{
								gardeningRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(gardeningRef / expensesTotal), false);
							}
							else if (gardeningRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(gardeningRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 15:
							if (Double.IsNaN(cleaningRef) || Double.IsNaN(expensesTotal))
							{
								cleaningRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(cleaningRef / expensesTotal), false);
							}
							else if (cleaningRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(cleaningRef / expensesTotal), false);
							}

							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 16:
							if (Double.IsNaN(utilitiesRef) || Double.IsNaN(expensesTotal))
							{
								utilitiesRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(utilitiesRef / expensesTotal), false);
							}
							else if (utilitiesRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(utilitiesRef / expensesTotal), false);
							}

							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 17:
							if (Double.IsNaN(otherExpenseRef) || Double.IsNaN(expensesTotal))
							{
								otherExpenseRef = 0;
								expensesTotal = 0;
								expensesProgress.SetProgress((float)(otherExpenseRef / expensesTotal), false);
							}
							else if (otherExpenseRef >= 0 && expensesTotal >= 0)
							{
								expensesProgress.SetProgress((float)(otherExpenseRef / expensesTotal), false);
							}
							//create a progress image and track image on pixlr.com and assign them to the progress bar for each row 
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
					}
					break;
				case 1:
					//specify the track and progress image colors here 
					listOfTable.TextLabel.Text = incomeCategories[indexPath.Row];
					listOfTable.TextLabel.TextColor = UIColor.Black;

					try
					{
						if (expensesValues.Count == 0)
						{
							throw new ArgumentOutOfRangeException();
						}
						else if (expensesValues.Count >= 0)
						{
							listOfTable.DetailTextLabel.Text = symbolCurrencyHandler + expensesValues[indexPath.Row];
							listOfTable.DetailTextLabel.TextColor = UIColor.Gray;
							listOfTable.DetailTextLabel.Font = UIFont.SystemFontOfSize(16.0f);
						}
					}
					catch (ArgumentOutOfRangeException)
					{

					}

					expensesProgress.TrackTintColor = UIColor.LightGray;
					expensesProgress.ProgressTintColor = UIColor.Green;
					tableView.AddSubview(expensesProgress);
					switch (indexPath.Row)
					{
						case 0:
							if (Double.IsNaN(wagesRef) || Double.IsNaN(incomeTotal))
							{
								wagesRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(wagesRef / incomeTotal), false);
							}
							else if (wagesRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(wagesRef / incomeTotal), false);
							}
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 1:
							if (Double.IsNaN(realestateRef) || Double.IsNaN(incomeTotal))
							{
								realestateRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(realestateRef / incomeTotal), false);
							}
							else if (realestateRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(realestateRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 2:
							if (Double.IsNaN(salesHouseStockRef) || Double.IsNaN(incomeTotal))
							{
								salesHouseStockRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(salesHouseStockRef / incomeTotal), false);
							}
							else if (salesHouseStockRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(salesHouseStockRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 3:
							if (Double.IsNaN(smallBusinessRef) || Double.IsNaN(incomeTotal))
							{
								smallBusinessRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(smallBusinessRef / incomeTotal), false);
							}
							else if (smallBusinessRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(smallBusinessRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 4:
							if (Double.IsNaN(gamblingWinningsRef) || Double.IsNaN(incomeTotal))
							{
								gamblingWinningsRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(gamblingWinningsRef / incomeTotal), false);
							}
							else if (gamblingWinningsRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(gamblingWinningsRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 5:
							if (Double.IsNaN(salesOfTradesRef) || Double.IsNaN(incomeTotal))
							{
								salesOfTradesRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(salesOfTradesRef / incomeTotal), false);
							}
							else if (salesOfTradesRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(salesOfTradesRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 6:
							if (Double.IsNaN(intellectualPropertyRef) || Double.IsNaN(incomeTotal))
							{
								intellectualPropertyRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(intellectualPropertyRef / incomeTotal), false);
							}
							else if (intellectualPropertyRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(intellectualPropertyRef / incomeTotal), false);
							}
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 7:
							if (Double.IsNaN(appRoyaltiesRef) || Double.IsNaN(incomeTotal))
							{
								appRoyaltiesRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(appRoyaltiesRef / incomeTotal), false);
							}
							else if (appRoyaltiesRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(appRoyaltiesRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;

						case 8:
							if (Double.IsNaN(bookPublishingRef) || Double.IsNaN(incomeTotal))
							{
								bookPublishingRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(bookPublishingRef / incomeTotal), false);
							}
							else if (bookPublishingRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(bookPublishingRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 9:
							if (Double.IsNaN(tradeDividendsRef) || Double.IsNaN(incomeTotal))
							{
								tradeDividendsRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(tradeDividendsRef / incomeTotal), false);
							}
							else if (tradeDividendsRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(tradeDividendsRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 10:
							if (Double.IsNaN(bankInterestRef) || Double.IsNaN(incomeTotal))
							{
								bankInterestRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(bankInterestRef / incomeTotal), false);
							}
							else if (bankInterestRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(bankInterestRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 11:
							if (Double.IsNaN(taxReturnRef) || Double.IsNaN(incomeTotal))
							{
								taxReturnRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(taxReturnRef / incomeTotal), false);
							}
							else if (taxReturnRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(taxReturnRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 12:
							if (Double.IsNaN(studentLoanRef) || Double.IsNaN(incomeTotal))
							{
								studentLoanRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(studentLoanRef / incomeTotal), false);
							}
							else if (studentLoanRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(studentLoanRef / incomeTotal), false);
							}

							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 13:
							if (Double.IsNaN(inheritanceRef) || Double.IsNaN(incomeTotal))
							{
								inheritanceRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(inheritanceRef / incomeTotal), false);
							}
							else if (inheritanceRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(inheritanceRef / incomeTotal), false);
							}
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 14:
							if (Double.IsNaN(prizeMoneyRef) || Double.IsNaN(incomeTotal))
							{
								prizeMoneyRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(prizeMoneyRef / incomeTotal), false);
							}
							else if (prizeMoneyRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(prizeMoneyRef / incomeTotal), false);
							}
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
						case 15:
							if (Double.IsNaN(otherIncomeRef) || Double.IsNaN(incomeTotal))
							{
								otherIncomeRef = 0;
								incomeTotal = 0;
								expensesProgress.SetProgress((float)(otherIncomeRef / incomeTotal), false);
							}
							else if (otherIncomeRef >= 0 && incomeTotal >= 0)
							{
								expensesProgress.SetProgress((float)(otherIncomeRef / incomeTotal), false);
							}
							listOfTable.AccessoryView = expensesProgress;
							return listOfTable;
							break;
					}
					break;
			}
			return listOfTable;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			if(section == 0) {
				return this.expensesCategories.Count;
			}
			else if(section == 1) {
				return this.incomeCategories.Count;
			}
			return 0;
		}

		private void rowInformationSelected(string title, string description, double percentage, double total, double amount, string symbolCurrency) {
			UIAlertController infoController = UIAlertController.Create(title, description, UIAlertControllerStyle.Alert);

			UIAlertAction confirmed = UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (Action) => {
				infoController.Dispose();
			});

			//text field: amount
			infoController.AddTextField((UITextField obj) => {
				obj.BorderStyle = UITextBorderStyle.RoundedRect;
				obj.Text = "Amount: " + symbolCurrency +  amount; //specify amount
				obj.UserInteractionEnabled = false;
				obj.ClearButtonMode = UITextFieldViewMode.Never;
				obj.Enabled = false; 
			});

			//textfield: total
			infoController.AddTextField((UITextField obj_2) =>
			{
				obj_2.BorderStyle = UITextBorderStyle.RoundedRect;
				obj_2.Text = "Total: " + symbolCurrency + total; //specify amount
				obj_2.UserInteractionEnabled = false;
				obj_2.ClearButtonMode = UITextFieldViewMode.Never;
				obj_2.Enabled = false;
			});

			infoController.AddTextField((UITextField obj_3) =>
			{
				obj_3.BorderStyle = UITextBorderStyle.RoundedRect;
				obj_3.Text = "Percentage: " + percentage + "%"; //specify amount
				obj_3.UserInteractionEnabled = false;
				obj_3.ClearButtonMode = UITextFieldViewMode.Never;
				obj_3.Enabled = false;
			});

			infoController.AddAction(confirmed); 

			if(this.PresentedViewController == null) {
				this.PresentViewController(infoController, true, null);
			}

			else if(this.PresentedViewController != null) {
				this.PresentedViewController.DismissViewController(true, () => {
					this.PresentedViewController.Dispose();
					this.PresentViewController(infoController, true, null);
				});
			}
		}


		public override void RowSelected(UIKit.UITableView tableView, Foundation.NSIndexPath indexPath)
		{
			switch(indexPath.Section) {
				case 0: //expenses list
					switch(indexPath.Row) {
						case 0: //rent 
							rowInformationSelected(this.expensesCategories[0], "",  Math.Round(rentRef / expensesTotal * 100), expensesTotal, rentRef, symbolCurrencyHandler);
							break;

						case 1: //housing 
							rowInformationSelected(this.expensesCategories[1], "", Math.Round(housingRef / expensesTotal * 100), expensesTotal, housingRef, symbolCurrencyHandler);
							break;

						case 2: //mortgage
							rowInformationSelected(this.expensesCategories[2], "", Math.Round(mortgageRef / expensesTotal * 100), expensesTotal, mortgageRef, symbolCurrencyHandler);
							break;

						case 3: //insurance 
							rowInformationSelected(this.expensesCategories[3], "", Math.Round(insuranceRef / expensesTotal * 100), expensesTotal, insuranceRef, symbolCurrencyHandler);
							break;

						case 4: //Taxes 
							rowInformationSelected(this.expensesCategories[4], "", Math.Round(taxesRef / expensesTotal * 100), expensesTotal, taxesRef, symbolCurrencyHandler);
							break;

						case 5: //car payments
							rowInformationSelected(this.expensesCategories[5], "", Math.Round(carPaymentsRef / expensesTotal * 100), expensesTotal, carPaymentsRef, symbolCurrencyHandler);
							break;

						case 6: //education
							rowInformationSelected(this.expensesCategories[6], "", Math.Round(educationRef / expensesTotal * 100), expensesTotal, educationRef, symbolCurrencyHandler);
							break;
												
						case 7: //Electronics
							rowInformationSelected(this.expensesCategories[7], "", Math.Round(electronicsRef / expensesTotal * 100), expensesTotal, electronicsRef, symbolCurrencyHandler);
							break;

						case 8: //Entertainment
							rowInformationSelected(this.expensesCategories[8], "", Math.Round(entertainmentRef / expensesTotal * 100), expensesTotal, entertainmentRef, symbolCurrencyHandler);
							break;

						case 9: //Clothing & Footwear
							rowInformationSelected(this.expensesCategories[9], "", Math.Round(clothingRef / expensesTotal * 100), expensesTotal, clothingRef, symbolCurrencyHandler);
							break;

						case 10: //Pets
							rowInformationSelected(this.expensesCategories[10], "", Math.Round(petsRef / expensesTotal * 100), expensesTotal, petsRef, symbolCurrencyHandler);
							break;

						case 11: //Charity
							rowInformationSelected(this.expensesCategories[11], "", Math.Round(charityRef / expensesTotal * 100), expensesTotal, charityRef, symbolCurrencyHandler);
							break;

						case 12: //Food
							rowInformationSelected(this.expensesCategories[12], "", Math.Round(foodRef / expensesTotal * 100), expensesTotal, foodRef, symbolCurrencyHandler);
							break;

						case 13: //Health&Lifestyle
							rowInformationSelected(this.expensesCategories[13], "", Math.Round(healthLifestyleRef / expensesTotal * 100), expensesTotal, healthLifestyleRef, symbolCurrencyHandler);
							break;

						case 14: //Gardening
							rowInformationSelected(this.expensesCategories[14], "", Math.Round(gardeningRef / expensesTotal * 100), expensesTotal, gardeningRef, symbolCurrencyHandler);
							break;

						case 15: //Cleaning & Maintainance
							rowInformationSelected(this.expensesCategories[15], "", Math.Round(cleaningRef / expensesTotal * 100), expensesTotal, cleaningRef, symbolCurrencyHandler);
							break;

						case 16: //Utilities
							rowInformationSelected(this.expensesCategories[16], "", Math.Round(utilitiesRef / expensesTotal * 100), expensesTotal, utilitiesRef, symbolCurrencyHandler);
							break;

						case 17: //Other 
							rowInformationSelected(this.expensesCategories[17], "", Math.Round(otherExpenseRef / expensesTotal * 100), expensesTotal, otherExpenseRef, symbolCurrencyHandler);
							break;
					}
					break;
				case 1: //income list
					switch (indexPath.Row)
					{
						case 0://wages 
							rowInformationSelected(this.incomeCategories[0], "", Math.Round(wagesRef / expensesTotal * 100), incomeTotal, wagesRef, symbolCurrencyHandler);
							break;

						case 1: //realestate
							rowInformationSelected(this.incomeCategories[1], "", Math.Round(realestateRef / expensesTotal * 100), incomeTotal, realestateRef, symbolCurrencyHandler);
							break;
						
						case 2: //sales of house stock
							rowInformationSelected(this.incomeCategories[2], "", Math.Round(salesHouseStockRef / expensesTotal * 100), incomeTotal, salesHouseStockRef, symbolCurrencyHandler);
							break;
						
						case 3: //small business
							rowInformationSelected(this.incomeCategories[3], "", Math.Round(smallBusinessRef / expensesTotal * 100), incomeTotal, smallBusinessRef, symbolCurrencyHandler);
							break;
						
						case 4: //gambling winnings
							rowInformationSelected(this.incomeCategories[4], "", Math.Round(gamblingWinningsRef / expensesTotal * 100), incomeTotal, gamblingWinningsRef, symbolCurrencyHandler);
							break;

						case 5: //sales of trades
							rowInformationSelected(this.incomeCategories[5], "", Math.Round(salesOfTradesRef / expensesTotal * 100), incomeTotal, salesOfTradesRef, symbolCurrencyHandler);
							break;

						case 6: //intellectual property
							rowInformationSelected(this.incomeCategories[6], "", Math.Round(intellectualPropertyRef / expensesTotal * 100), incomeTotal, intellectualPropertyRef, symbolCurrencyHandler);
							break;

						case 7: //app royalties
							rowInformationSelected(this.incomeCategories[7], "", Math.Round(appRoyaltiesRef / expensesTotal * 100), incomeTotal, appRoyaltiesRef, symbolCurrencyHandler);
							break;

						case 8: //book publishing
							rowInformationSelected(this.incomeCategories[8], "", Math.Round(bookPublishingRef / expensesTotal * 100), incomeTotal, bookPublishingRef, symbolCurrencyHandler);
							break;

						case 9: //trade dividends
							rowInformationSelected(this.incomeCategories[9], "", Math.Round(tradeDividendsRef / expensesTotal * 100), incomeTotal, tradeDividendsRef, symbolCurrencyHandler);
							break;

						case 10: //bank interest
							rowInformationSelected(this.incomeCategories[10], "", Math.Round(bankInterestRef / expensesTotal * 100), incomeTotal, bankInterestRef, symbolCurrencyHandler);
							break;

						case 11: //tax return
							rowInformationSelected(this.incomeCategories[11], "", Math.Round(taxReturnRef / expensesTotal * 100), incomeTotal, taxReturnRef, symbolCurrencyHandler);
							break;

						case 12: //student loan
							rowInformationSelected(this.incomeCategories[12], "", Math.Round(studentLoanRef / expensesTotal * 100), incomeTotal, studentLoanRef, symbolCurrencyHandler);
							break;

						case 13: //inheritance
							rowInformationSelected(this.incomeCategories[13], "", Math.Round(inheritanceRef / expensesTotal * 100), incomeTotal, inheritanceRef, symbolCurrencyHandler);
							break;


						case 14: //prize money
							rowInformationSelected(this.incomeCategories[14], "", Math.Round(prizeMoneyRef / expensesTotal * 100), incomeTotal, prizeMoneyRef, symbolCurrencyHandler);
							break;

						case 15: // other
							rowInformationSelected(this.incomeCategories[15], "",Math.Round(otherIncomeRef / expensesTotal * 100), incomeTotal, otherIncomeRef, symbolCurrencyHandler);
							break;
					}
					break;
			}
			tableView.DeselectRow(indexPath, true);
		}

		public override string TitleForHeader(UITableView tableView, nint section)
		{
			if(section == 0) {
				return "Expenses"; 
			}
			else if(section == 1) {
				return "Income";
			}
			return "";
		}

		//prompts the user at the currency controller whether they want to restart manual input of financials
		private void restartManualUpdate(string title, string message)
		{
			UIAlertController manual = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);

			UIAlertAction confirmed = UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (Action) =>
			{
				manual.Dispose();
			});

			manual.AddAction(confirmed);

			try
			{
				Currency currency = this.Storyboard.InstantiateViewController("Currency") as Currency;
				if (currency == null)
				{
					throw new NullReferenceException();
				}
				else {
					if (currency.PresentedViewController == null)
					{
						currency.PresentViewController(manual, true, null);
					}
					else if (currency.PresentedViewController != null)
					{
						currency.PresentedViewController.DismissViewController(true, () =>
						{
							this.Dispose();
							currency.PresentViewController(manual, true, null);
						});
					}
				}
			}
			catch (NullReferenceException)
			{
				try
				{
					Console.WriteLine("Navigation Controller stack index: " + this.NavigationController.ViewControllers[1]);
					var currency_2 = this.NavigationController.ViewControllers[3];
					if (currency_2 == null)
					{
						throw new NullReferenceException();
					}

					else {
						if (currency_2.PresentedViewController == null)
						{
							currency_2.PresentViewController(manual, true, null);
						}
						else if (currency_2.PresentedViewController != null)
						{
							currency_2.PresentedViewController.DismissViewController(true, () =>
							{
								this.Dispose();
								currency_2.PresentViewController(manual, true, null);
							});
						}
					}
				}
				catch (NullReferenceException)
				{
					Console.WriteLine(">:(");
				}
			}
		}


		public override void ViewDidLoad()
		{
			//scrolls to expenses
			UISwipeGestureRecognizer swipeToExpenses = new UISwipeGestureRecognizer();
			swipeToExpenses.Direction = UISwipeGestureRecognizerDirection.Left;
			swipeToExpenses.AddTarget((Action) =>
			{
				//playing a scroll sound
				SystemSound soundExpense = new SystemSound(1004);
				soundExpense.PlaySystemSound();

				//scroll to top of income table
				NSIndexPath indexExpense = NSIndexPath.FromRowSection(0, 0);
				this.TableView.ScrollToRow(indexExpense, UITableViewScrollPosition.Top, true);
			});

			this.View.AddGestureRecognizer(swipeToExpenses);

			//scrolls to income 
			UISwipeGestureRecognizer swipeToIncome = new UISwipeGestureRecognizer();
			swipeToIncome.Direction = UISwipeGestureRecognizerDirection.Right;
			swipeToIncome.AddTarget((Action) => {

				//playing a scroll sound
				SystemSound soundIncome = new SystemSound(1004);
				soundIncome.PlaySystemSound();

				//scroll to top of income table
				NSIndexPath indexIncome = NSIndexPath.FromRowSection(0, 1);
				this.TableView.ScrollToRow(indexIncome, UITableViewScrollPosition.Top, true);
			});

			this.View.AddGestureRecognizer(swipeToIncome);



			this.TableView.AllowsSelection = false;
			this.TableView = new UITableView(new CGRect(0, 0, this.View.Bounds.Width, this.View.Bounds.Height), UITableViewStyle.Grouped);

			this.View.BackgroundColor = UIColor.White; 



			//Alert controllers that emerge due to the comparing of the income and the expenses
			//WARN the user to deal with his finances since his income is far less than his expenses


			//budget proposal 

			UIBarButtonItem restartButton = new UIBarButtonItem(UIBarButtonSystemItem.Refresh, (sender, e) => {
				UIAlertController promptRestart = UIAlertController.Create("Start Again?", "Do you want to start with another budget calculation? Doing so will override all your progress", UIAlertControllerStyle.Alert);

				UIAlertAction confirmed = UIAlertAction.Create("Yes", UIAlertActionStyle.Default, (Action) => {
				ExpenseController exp = new ExpenseController();
					IncomeBudgetController income = new IncomeBudgetController();
					BudgetController budgetCurrency = new BudgetController();

					Console.WriteLine("Expenses: " + exp);
					Console.WriteLine("Income: " + income);
					Console.WriteLine("Main Page: " + budgetCurrency);

					//pops to the original controller and disposes any resources that the user has entered 

					//problem here occurs says that BudgetController does not exist within the storyboard

					this.NavigationController.PopToViewController(this.NavigationController.ViewControllers[1], true);
					exp.Dispose();
					income.Dispose();
					this.Dispose();
				});

				UIAlertAction denied = UIAlertAction.Create("No", UIAlertActionStyle.Cancel, (Action) => {
					promptRestart.Dispose();
				});

				promptRestart.AddAction(confirmed);
				promptRestart.AddAction(denied);

				if (this.PresentedViewController == null)
				{
					this.PresentViewController(promptRestart, true, null);
				}
				else if(this.PresentedViewController != null) {
					this.PresentedViewController.DismissViewController(true, () =>
					{
						this.PresentedViewController.Dispose();
						this.PresentViewController(promptRestart, true, null);
					}); 
				}
			});

			this.NavigationItem.SetLeftBarButtonItem(restartButton, true);



			//create the nav bar indicator here

			//Test if the vault gets updated
			UIBarButtonItem updateVault = new UIBarButtonItem("Vault", UIBarButtonItemStyle.Bordered, (object sender, EventArgs e) =>
			{
				//total
				PassingProperties.expensesTotal += this.expensesTotal;
				PassingProperties.incomeTotal += this.incomeTotal;

				//income properties 
				PassingProperties.wagesRef += this.wagesRef;
				PassingProperties.realestateRef += this.realestateRef;
				PassingProperties.salesHouseStockRef += this.salesHouseStockRef;
				PassingProperties.smallBusinessRef += this.smallBusinessRef;
				PassingProperties.gamblingWinningsRef += this.gamblingWinningsRef;
				PassingProperties.salesOfTradesRef += this.salesOfTradesRef;
				PassingProperties.intellectualPropertyRef += this.intellectualPropertyRef;
				PassingProperties.appRoyaltiesRef += this.appRoyaltiesRef;
				PassingProperties.bookPublishingRef += this.bookPublishingRef;
				PassingProperties.tradeDividendsRef += this.tradeDividendsRef;
				PassingProperties.bankInterestRef += this.bankInterestRef;
				PassingProperties.taxReturnRef += this.taxReturnRef;
				PassingProperties.studentLoanRef += this.studentLoanRef;
				PassingProperties.inheritanceRef += this.inheritanceRef;
				PassingProperties.prizeMoneyRef += this.prizeMoneyRef;
				PassingProperties.otherIncomeRef += this.otherIncomeRef; 

				//expenses properties
				PassingProperties.rentRef += this.rentRef;
				PassingProperties.housingRef += this.housingRef;
				PassingProperties.mortgageRef += this.mortgageRef;
				PassingProperties.insuranceRef += this.insuranceRef;
				PassingProperties.taxesRef += this.taxesRef;
				PassingProperties.carPaymentsRef += this.carPaymentsRef;
				PassingProperties.educationRef += this.educationRef;
				PassingProperties.electronicsRef += this.electronicsRef;
				PassingProperties.entertainmentRef += this.entertainmentRef;
				PassingProperties.clothingRef += this.clothingRef;
				PassingProperties.petsRef += this.petsRef;
				PassingProperties.charityRef += this.charityRef;
				PassingProperties.foodRef += this.foodRef;
				PassingProperties.healthLifestyleRef += this.healthLifestyleRef;
				PassingProperties.gardeningRef += this.gardeningRef;
				PassingProperties.cleaningRef += this.cleaningRef;
				PassingProperties.utilitiesRef += this.utilitiesRef;
				PassingProperties.otherExpenseRef += this.otherExpenseRef; 


				this.NavigationController.PopToViewController(this.NavigationController.ViewControllers[1], true);

				//restartManualUpdate("Vault is updated", "Your personal vault has now been updated with all the income and expenses you have typed in. You can start a new session.");

				AudioToolbox.SystemSound sound = new SystemSound(4095);
				sound.PlaySystemSound();
			});

			this.NavigationItem.SetRightBarButtonItem(updateVault, true);

			this.NavigationItem.Title = "Your Expenses VS Income";

			if(incomeTotal < expensesTotal) {
				UIAlertController redController = UIAlertController.Create("Warning", "Your income is far less than your expenses. You must do this something about this fast! See a finance advisor that can help you", UIAlertControllerStyle.Alert);
			
				/*UIAlertAction confiredBudget = UIAlertAction.Create("Proposed Budget", UIAlertActionStyle.Default, (Action) => { 
					//leads user to a new list of expenses
						//shows him what expenses was removed
					});*/

				UIAlertAction cancel = UIAlertAction.Create("Ok", UIAlertActionStyle.Destructive, (Action) => {
					redController.Dispose();
					});

				//redController.AddAction(confiredBudget);

				redController.AddAction(cancel); 

				if(this.PresentedViewController == null) {
					this.PresentViewController(redController, true, null);
				}
				else if(this.PresentedViewController != null) {
					this.PresentedViewController.DismissViewController(true, () =>
					{
						this.PresentViewController(redController, true, null);
					});
				}
			}

			//breakeven: Suggest possible improvements 
			else if(incomeTotal == expensesTotal) {
				UIAlertController grayController = UIAlertController.Create("You brokeeven", "Your income is equal to your expenses. You should see a finance advisor for help", UIAlertControllerStyle.Alert);


				/*UIAlertAction confiredBudget = UIAlertAction.Create("Proposed Budget", UIAlertActionStyle.Default, (Action) =>
				{
					//leads user to a new list of expenses
					//shows him what expenses was removed
				});*/

				UIAlertAction cancel = UIAlertAction.Create("Ok", UIAlertActionStyle.Destructive, (Action) =>
				{
					grayController.Dispose();
				});

				//grayController.AddAction(confiredBudget);

				grayController.AddAction(cancel);

				if (this.PresentedViewController == null)
				{
					this.PresentViewController(grayController, true, null);
				}
				else if (this.PresentedViewController != null)
				{
					this.PresentedViewController.DismissViewController(true, () =>
					{
						this.PresentViewController(grayController, true, null);
					});
				}
			}

			//user handles his money well
			else if(incomeTotal > expensesTotal) {
				UIAlertController greenController = UIAlertController.Create("You handle money well", "Your income is far greater than your expenses. Well done.", UIAlertControllerStyle.Alert);
			
				/*UIAlertAction confiredBudget = UIAlertAction.Create("Proposed Budget", UIAlertActionStyle.Default, (Action) =>
				{
					//leads user to a new list of expenses
					//shows him what expenses was removed
				});*/

				UIAlertAction cancel = UIAlertAction.Create("Ok", UIAlertActionStyle.Default, (Action) =>
				{
					greenController.Dispose();
				});

				//greenController.AddAction(confiredBudget);

				greenController.AddAction(cancel);

				if (this.PresentedViewController == null)
				{
					this.PresentViewController(greenController, true, null);
				}
				else if (this.PresentedViewController != null)
				{
					this.PresentedViewController.DismissViewController(true, () =>
					{
						this.PresentedViewController.Dispose(); 
						this.PresentViewController(greenController, true, null);
					});
				}
			}
		}

	}
}
